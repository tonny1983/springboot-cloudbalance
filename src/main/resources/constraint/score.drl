package cc.tonny.optaplanner.exercise.springbootcloudbalance.domain;
dialect  "java"

import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder;

import cc.tonny.optaplanner.exercise.springbootcloudbalance.domain.CloudComputer;
import cc.tonny.optaplanner.exercise.springbootcloudbalance.domain.CloudProcess;

global HardMediumSoftScoreHolder scoreHolder;

rule "CPU capacity"
    when
        $computer : CloudComputer($cpuCapacity : cpuCapacity)
        $totalUsed : Integer($totalUsed > $cpuCapacity) from accumulate(
            CloudProcess(cloudComputer == $computer, $cpuRequired : cpuRequired),
            sum($cpuRequired)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, $cpuCapacity - $totalUsed);
end

rule "Memory capacity"
    when
        $computer : CloudComputer($memoryCapacity : memoryCapacity)
        $totalUsed : Integer($totalUsed > $memoryCapacity) from accumulate(
            CloudProcess(cloudComputer == $computer, $memoryRequired : memoryRequired),
            sum($memoryRequired)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, $memoryCapacity - $totalUsed);
end

rule "Network capacity"
    when
        $computer : CloudComputer($networkCapacity : networkCapacity)
        $totalUsed : Integer($totalUsed > $networkCapacity) from accumulate(
            CloudProcess(cloudComputer == $computer, $networkRequired : networkRequired),
            sum($networkRequired)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, $networkCapacity - $totalUsed);
end

rule "Not Assigned"
    when
        CloudProcess($weightIndex : getDifficultyIndex() ,cloudComputer == null)
    then
        scoreHolder.addMediumConstraintMatch(kcontext, -$weightIndex);
end


rule "Computer Cost"
    when
        $computer : CloudComputer($cost : cost)
        exists CloudProcess(cloudComputer == $computer)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $cost);
end